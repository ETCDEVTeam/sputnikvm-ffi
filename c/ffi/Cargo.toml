[package]
name = "sputnikvm-ffi"
version = "0.0.0"
authors = ["Wei Tang <hi@that.world>"]

[lib]
crate-type = ["staticlib", "cdylib"]

[dependencies]
libc = "0.2"
etcommon-bigint = { version = "0.2", default-features = false, features = ["rlp"] }
sputnikvm = { path = "/home/mike/dev/etcdev/sputnikvm", default-features = false, features = ["std", "rust-secp256k1"] }
sputnikvm-network-classic = { path = "/home/mike/dev/etcdev/sputnikvm/network/classic", default-features = false, features = ["std", "rust-secp256k1"] }

env_logger = "0.5.13"

[profile.release]
opt-level = 2      # controls the `--opt-level` the compiler builds with.
                   # 0-1 is good for debugging. 2 is well-optimized. Max is 3.
                   # 's' attempts to reduce size, 'z' reduces size even more.
debug = true       # (u32 or bool) Include debug information (debug symbols).
                   # Equivalent to `-C debuginfo=2` compiler flag.
rpath = false      # controls whether compiler should set loader paths.
                   # If true, passes `-C rpath` flag to the compiler.
lto = false        # Link Time Optimization usually reduces size of binaries
                   # and static libraries. Increases compilation time.
                   # If true, passes `-C lto` flag to the compiler, and if a
                   # string is specified like 'thin' then `-C lto=thin` will
                   # be passed.
debug-assertions = true # controls whether debug assertions are enabled
                   # (e.g. debug_assert!() and arithmetic overflow checks)
codegen-units = 16 # if > 1 enables parallel code generation which improves
                   # compile times, but prevents some optimizations.
                   # Passes `-C codegen-units`.
panic = 'unwind'   # panic strategy (`-C panic=...`), can also be 'abort'
incremental = true # whether or not incremental compilation is enabled
overflow-checks = true # use overflow checks for integer arithmetic.
                   # Passes the `-C overflow-checks=...` flag to the compiler.
